# –Ü–º–ø–æ—Ä—Ç–∏ –º–æ–¥—É–ª—ñ–≤
from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

# –Ü–º–ø–æ—Ä—Ç–∏ –∑ —ñ–Ω—à–∏—Ö —Ñ–∞–π–ª—ñ–≤ –ø—Ä–æ–µ–∫—Ç—É
from Utils.states import Form
from Keyboards.reply import rmk, main
from Keyboards.builder import answer
from Data.subloader import get_tren, into_record

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
router=Router()
into_text=[]
shedule, tren=[], []

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–æ—á–∞—Ç–∫—É –∑–∞–ø–∏—Å—É –Ω–∞ —Ç—Ä–µ–Ω—ñ–Ω–≥
@router.message(F.text == "–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —Ç—Ä–µ–Ω—ñ–Ω–≥")
async def fill_answer(message: Message, state:FSMContext):
    del into_text[:]
    await state.set_state(Form.name)
    await message.answer(
        '–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º\'—è –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—ñ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥—É üëá',
        reply_markup=answer(message.from_user.first_name)
    )

# –û–±—Ä–æ–±–Ω–∏–∫ —Å—Ç–∞–Ω—É –∑–∞–ø–∏—Å—É —ñ–º–µ–Ω—ñ
@router.message(Form.name)
async def form_name(message: Message, state:FSMContext):
    into_text.append(message.text)
    await state.set_state(Form.surname)
    await message.answer(
        '–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø—Ä—ñ–∑–≤–∏—â–µ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—ñ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥—É üëá',
        reply_markup=answer(message.from_user.last_name)
    )

# –û–±—Ä–æ–±–Ω–∏–∫ —Å—Ç–∞–Ω—É –∑–∞–ø–∏—Å—É –ø—Ä—ñ–∑–≤–∏—â–∞
@router.message(Form.surname)
async def form_surname(message: Message, state:FSMContext):
    into_text.append(message.text)
    await state.set_state(Form.age)
    await message.answer(
        '–í–∫–∞–∂—ñ—Ç—å, —Å–∫—ñ–ª—å–∫–∏ –≤–∞–º —Ä–æ–∫—ñ–≤ (–ª–∏—à–µ —á–∏—Å–ª–æ).',
        reply_markup=rmk
    )

# –û–±—Ä–æ–±–Ω–∏–∫ —Å—Ç–∞–Ω—É –∑–∞–ø–∏—Å—É –≤—ñ–∫—É
@router.message(Form.age)
async def form_age(message: Message, state:FSMContext):
    if message.text.isdigit():
        into_text.append(int(message.text))
        await state.set_state(Form.phone)
        await message.answer(
            '–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É', 
            reply_markup=rmk)
    else: 
        await message.answer('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ª–∏—à–µ —á–∏—Å–ª–æ!')
    
# –û–±—Ä–æ–±–Ω–∏–∫ —Å—Ç–∞–Ω—É –∑–∞–ø–∏—Å—É –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω—É
@router.message(Form.phone)
async def form_phone_text(message: Message, state:FSMContext):
    into_text.append(message.text)
    await state.set_state(Form.email)
    await message.answer(
        '–í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –≤–∞—à–æ—ó –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—ó –ø–æ—à—Ç–∏.',
        reply_markup=rmk)

# –û–±—Ä–æ–±–Ω–∏–∫ —Å—Ç–∞–Ω—É –∑–∞–ø–∏—Å—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—ó –ø–æ—à—Ç–∏
@router.message(Form.email)
async def form_email(message: Message, state:FSMContext):
    into_text.append(message.text)
    await state.set_state(Form.trening)
    global tren
    tren = await get_tren('name')

    await message.answer(
        '–ù–∞ —è–∫–∏–π —Ç—Ä–µ–Ω—ñ–Ω–≥ –≤–∏ –±–∞–∂–∞—î—Ç–µ –∑–∞–ø–∏—Å–∞—Ç–∏—Å—å? \n–û–±–µ—Ä—ñ—Ç—å 1 –∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–ª—è –∑–∞–ø–∏—Å—É –ø—ñ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥—É üëá',
        reply_markup=answer(tren)
        )

# –û–±—Ä–æ–±–Ω–∏–∫ —Å—Ç–∞–Ω—É –∑–∞–ø–∏—Å—É —Ç—Ä–µ–Ω—ñ–Ω–≥—É
@router.message(Form.trening)
async def form_trening(message: Message, state:FSMContext):
    into_text.append(message.text)
    await state.set_state(Form.shedule)
    global shedule
    shedule=[
            '–°–ë-–ù–î, –∑ 10:00 –¥–æ 14:00',
            '–°–ë, –∑ 10:00 –¥–æ 18:00',
            '–ú–æ–∂—É —É –±—É–¥–Ω—ñ –¥–Ω—ñ, –¥–≤–∞ –¥–Ω—ñ –ø–æ—Å–ø—ñ–ª—å, 10:00-14:00',
            '–ú–æ–∂—É —É –±—É–¥–Ω—ñ –¥–Ω—ñ, –æ–¥–∏–Ω –¥–µ–Ω—å, 10:00-18:00'
        ]
    await message.answer(
        '–Ø–∫–∏–π –≥—Ä–∞—Ñ—ñ–∫ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –≤–∞–º –±—ñ–ª—å—à–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å? \n–û–±–µ—Ä—ñ—Ç—å 1 –∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ä–æ–∑–∫–ª–∞–¥—ñ–≤ –ø—ñ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥—É üëá',
        reply_markup=answer(shedule)
        )
    
# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä—É–≤–∞–Ω–Ω—è —Ç—Ä–µ–Ω—ñ–Ω–≥—É (–≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ)
'''
@router.message(Form.trening, F.text.casefold().func(lambda message, tren=tren: message.text in tren))
async def incorect_form_trening(message: Message, state:FSMContext):
    await message.answer('–¢–∞–∫–æ–≥–æ —Ç—Ä–µ–Ω—ñ–Ω–≥—É –Ω–µ —ñ—Å–Ω—É—î. –ë—É–¥—å-–ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —ñ—Å–Ω—É—é—á–∏–π —Ç—Ä–µ–Ω—ñ–Ω–≥ –∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –ø—ñ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥—É')'''
    
# –û–±—Ä–æ–±–Ω–∏–∫ —Å—Ç–∞–Ω—É –∑–∞–ø–∏—Å—É –≥—Ä–∞—Ñ—ñ–∫–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å
@router.message(Form.shedule)
async def form_shedule(message: Message, state:FSMContext):
    into_text.append(message.text)
    await state.set_state(Form.interesting)
    await message.answer(
        '–©–æ —Å–∞–º–µ –∑ —Ç–µ–º–∏ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ñ–≤ –≤–∞–º –Ω–∞–π–±—ñ–ª—å—à —Ü—ñ–∫–∞–≤–æ? \n–û–±–µ—Ä—ñ—Ç—å 1 –∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø—ñ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥—É üëá –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç.',
        reply_markup=answer([
            '–û—Å–æ–±–∏—Å—Ç—ñ –Ω–∞–≤–∏—á–∫–∏',
            '–°–∫–ª–∞–¥–Ω—ñ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∏',
            '–ü–µ—Ä–µ–≥–æ–≤–æ—Ä–∏ –∑ –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏',
            '–ü–µ—Ä–µ–≥–æ–≤–æ—Ä–∏ –≤ –ø—Ä–æ–¥–∞–∂–∞—Ö'
        ])
        )

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä—É–≤–∞–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—É —Ç—Ä–µ–Ω—ñ–Ω–≥—É (–≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ)
'''    
@router.message(Form.shedule, F.text.in_(shedule))
async def incorect_form_trening(message: Message, state:FSMContext):
    await message.answer('–¢–∞–∫–æ–≥–æ –≥—Ä–∞—Ñ—ñ–∫—É —Ç—Ä–µ–Ω—ñ–Ω–≥—ñ–≤ —É –Ω–∞—Å –Ω–µ–º–∞—î. –ë—É–¥—å-–ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —ñ—Å–Ω—É—é—á–∏–π –≥—Ä–∞—Ñ—ñ–∫ –∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –ø—ñ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥—É')'''
    
# –û–±—Ä–æ–±–Ω–∏–∫ —Å—Ç–∞–Ω—É –∑–∞–ø–∏—Å—É —ñ–Ω—Ç–µ—Ä–µ—Å—É
@router.message(Form.interesting)
async def form_interesting(message: Message, state:FSMContext):
    into_text.append(message.text)
    await state.set_state(Form.confirm)
    await message.answer(f'''<b>–í–∏ –≤–≤–µ–ª–∏ –Ω–∞—Å—Ç—É–ø–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –∑–∞–ø–∏—Å—É –Ω–∞ —Ç—Ä–µ–Ω—ñ–Ω–≥:</b>\n
–Ü–º\'—è: {into_text[0]}
–ü—Ä—ñ–∑–≤–∏—â–µ: {into_text[1]}
–í—ñ–∫: {into_text[2]} —Ä–æ–∫—ñ–≤
–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {into_text[3]}
–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞: {into_text[4]}
–¢—Ä–µ–Ω—ñ–Ω–≥: {into_text[5]}
–ì—Ä–∞—Ñ—ñ–∫ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å: {into_text[6]}
–¶—ñ–∫–∞–≤–∏—Ç–µ—Å—å: {into_text[7]}

–ë–∞–∂–∞—î—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —Ä–µ–∂—Å—Ç—Ä–∞—Ü—ñ—é?''', 
        reply_markup=answer(['–ü—ñ–¥—Ç–≤–µ—Ä–∂–∏—Ç–∏', '–°–∫–∞—Å—É–≤–∞—Ç–∏']))

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è/—Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É
@router.message(Form.confirm, F.text.in_(['–ü—ñ–¥—Ç–≤–µ—Ä–∂–∏—Ç–∏', '–°–∫–∞—Å—É–≤–∞—Ç–∏']))
async def form_confirm(message: Message, state:FSMContext):
    if message.text == '–ü—ñ–¥—Ç–≤–µ—Ä–∂–∏—Ç–∏':
        await state.clear()
        await into_record(into_text)
        await message.answer('–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–ª–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω—ñ–Ω–≥. –ß–µ–∫–∞—Ç–∏–º–µ–º–æ –≤–∞—Å —ñ–∑ –Ω–µ—Ç–µ—Ä–ø—ñ–Ω–Ω—è–ºüòä', reply_markup=main)
    else:
        await state.clear()
        await message.answer('–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.', reply_markup=main)

    